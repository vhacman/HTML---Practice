Un form HTML è uno strumento per raccogliere dati da parte dell’utente.
È composto da elementi `<form>` e input associati, come `<input>`, `<textarea>`, `<select>`. I dati raccolti vengono inviati a un server per essere elaborati.

**Problema:** 
dati errati inseriti dall’utente possono compromettere la funzionalità dell’applicazione. 
Esempio: un utente inserisce un indirizzo di consegna inesistente. 
Se il form accetta il dato senza verifica, l’ordine non arriva. Fallimento dell’interazione.

**Soluzione:** 
validazione del form.

Validazione
La validazione è il processo di controllo dei dati inseriti affinché rispettino regole prestabilite. 

Esistono due modalità:

-Client-side validation (validazione lato client)
Esegue il controllo direttamente nel browser, prima che i dati raggiungano il server. Vantaggi:
feedback immediato, minore carico sul server. Limiti: può essere aggirata, quindi non affidabile da sola.
Meccanismi:
**Attributi HTML**:
  * required: impedisce l’invio se il campo è vuoto.
  * type="email": accetta solo email in formato valido.
  * type="tel": accetta solo valori compatibili con numeri telefonici.
  * type="url": richiede un URL ben formato (es. https\://...).
  * type="number": accetta solo numeri.
  * type="range": impone valori minimi e massimi.
  * type="date", `type="time"`: accettano solo valori di tipo data/ora.
  * type="color": mostra selettore colore.
**Messaggi di errore automatici**: 
il browser blocca l’invio e segnala l’errore visivamente.
**JavaScript**:
 può essere usato per regole più complesse, ma è eseguito nel client e modificabile dall’utente.

-Server-side validation (validazione lato server)
Esegue il controllo dopo che i dati sono stati inviati al server.
È l’unico sistema affidabile per garantire la validità e la sicurezza dei dati.
Viene eseguito da linguaggi server-side (es. PHP, Python, Node.js) e può includere:
* Verifica sintattica
* Verifica logica
* Controlli incrociati con database
* Applicazione di regole aziendali
Protegge da:
* Dati manomessi
* Iniezioni di codice
* Tentativi di frode
* Violazioni dei vincoli

Combinazione dei due metodi
Approccio standard: usare entrambi i livelli di validazione.
**Client-side** → migliora l’esperienza utente, previene errori banali.
**Server-side** → garantisce la correttezza e la sicurezza dei dati.


Validazione client-side e uso del CSS nei form HTML

Problema iniziale
Durante la compilazione di un form, un campo può diventare rosso dopo l’invio se contiene un errore. 
Questo comportamento è legato alla validazione lato client e alla gestione visiva degli errori. Gli errori possono derivare da:

Campi vuoti
Valori troppo lunghi o troppo corti
Formato non valido (es. email malformata)

Obiettivo
Evitare invii inutili al server e migliorare l’interazione utente mediante:

HTML → per la definizione dei vincoli sui dati
CSS → per fornire segnali visivi immediati sui campi errati

Attributo required
Obbliga l’utente a inserire un valore in un campo.
Esempio:
<input type="text" id="username" name="username" required>
Effetto:
Se il Campo è vuoto → il browser blocca l’invio
Il focus viene portato sul campo mancante
Messaggio di errore generato automaticamente

Attributi minlength e maxlength
Consentono di definire la lunghezza minima e massima dei dati accettati.
Esempio:
<input type="text" id="username" name="username" required minlength="3" maxlength="12">
Effetti:
Dato troppo corto o troppo lungo → errore immediato
Il messaggio viene generato dal browser
Nessuna richiesta HTTP viene inviata

Efficienza
Utilizzare required, minlength, maxlength:
Riduce il carico sui server
Intercetta gli errori prima che i dati vengano inviati
Previen richieste HTTP inutili e risparmio di risorse lato backend
Segnalazione visiva degli errori con CSS
Uso delle pseudo-classi per modificare lo stile dinamicamente in base allo stato del campo.
input:invalid {
  border: 2px solid red;
}
Problema:
All’avvio della pagina, tutti i campi vuoti sono invalidi
Risultato: i bordi rossi appaiono subito, anche se l’utente non ha ancora interagito
Soluzione:
Combinazione con :focus per limitare l’evidenziazione all’interazione attiva:
css
input:invalid:focus {
  border: 2px solid red;
}
Comportamento:
La pagina si carica in stato neutro
Se l’utente inizia a digitare e il dato è errato → bordo rosso


Cosa succede quando invii un form online.
Quando ordini un prodotto online:
inserisci i dati: indirizzo, numero di carta etc√π
clicchi su un pulsante: "ordina"

Come comunica il browser con il server?

Tutto avviene attraverso il ciclo di richiesta-risposta HTTP:
il browser invia una richiesta(request)
il server elabora e restituisce una risposta(response)


METODO GET
il metodo get, √® usato per richiedere una risorsa(pagina, file, immagine)
dal servere, ma pu√≤ anche essere usato per trasmettere dati, come quelli di un form, attraverso URL.
I dati inseriti nei campi del form vengono codificati come coppie chiave=valore.
Queste coppie vengono aggiunge all'URL come query string.
Separatore ? per iniziare la query string
Separatore & tra le coppie.
exemple:

<form action="/search" method="get">
 <input type="text" name="q">
 <button type="submit">Search</button>
</form>

‚úÖ Vantaggi
Semplice da implementare

I link sono condivisibili (es. URL dei risultati di una ricerca)
Possono essere salvati nei preferiti
Compatibile con browser, cache, bot e indicizzazione

‚ùå Svantaggi
Limitazione di lunghezza (~2000 caratteri per browser, ~4k per server)
Dati visibili nella barra degli indirizzi, cronologia, log del server
Non adatto a dati sensibili (es. password, carte di credito)
Non ha un corpo HTTP, quindi non pu√≤ gestire file (upload)

üéØ Quando usare GET?
Moduli di ricerca
Filtri di visualizzazione (es. /products?color=red)
Pagine informative che non modificano dati sul server
Quando vuoi che l‚ÄôURL rifletta lo stato del form

METODO POST
il metodo POST √® usato per inviare dati al server che modificano lo stato della risorsa:
esempio per inviare un ordine, creare un utente, scrivere un commento.
I dati del form vengono inviati nel corpo (body) della richiesta HTTP
Il browser non li mostra nell'URL.

<form action="/submit" method="post">
  <input type="text" name="username">
  <input type="password" name="password">
  <button type="submit">Login</button>
</form>


‚úÖ Vantaggi
Dati non visibili nell‚ÄôURL
Nessun limite pratico di lunghezza
Supporta invio di file (multipart/form-data)
Pi√π sicuro per dati sensibili (ma solo se abbinato a HTTPS)

‚ùå Svantaggi
L‚Äôutente non pu√≤ salvare o condividere l‚ÄôURL con i dati
Non memorizzabile nei segnalibri
Richiede configurazione lato server per interpretare il corpo

üéØ Quando usare POST?
Moduli con dati sensibili (login, registrazione, pagamento)
Moduli complessi o lunghi
Quando i dati modificano lo stato del server
Quando si usa file upload

Sicurezza: 				GET 			vs			POST + HTTPS
						GET							POST
Visibilit√† dei dati		Alta (URL)					Bassa (nel corpo)
Cronologia/cache		S√¨							No
Supporto HTTPS			S√¨							S√¨
Protezione senza HTTPS	Nessuna						Minima
Protezione con HTTPS	Buona (ma query visibile)	Ottima (dati criptati)
